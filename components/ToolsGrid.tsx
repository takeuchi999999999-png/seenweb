// File: components/ToolsGrid.tsx (ƒê√É TH√äM LOGIC KI·ªÇM SO√ÅT QUY·ªÄN TRUY C·∫¨P)

import React, { useState } from 'react';
import {
  PyramidIcon, PhiIcon, BinocularsIcon, PortalIcon, HourglassIcon,
  GearIcon, CubeIcon, CompassIcon, BookIcon, MicrophoneIcon
} from './AnimatedIcons';
import ScriptwriterTool from './ScriptwriterTool';
import SeoTool from './SeoTool';
import RivalScannerTool from './RivalScannerTool';
import HiddenChannelFinderTool from './HiddenChannelFinderTool';
import ScriptRefinerTool from './ScriptRefinerTool';
import MicroNicheMinerTool from './MicroNicheMinerTool';
import ImageForgeTool from './ImageForgeTool';
import StoryStudioTool from './StoryStudioTool';
import TextToSpeechTool from './TextToSpeechTool';
import VeocityTool from './VeocityTool';
import { useAuth } from '../AuthContext'; // Import Auth Context

export interface Tool {
  name: string;
  shortDescription: string;
  longDescription: string;
  icon: React.ComponentType;
  bgColor: string;
}

const tools: Tool[] = [
  { 
    name: "VI·∫æT K·ªäCH B·∫¢N", 
    shortDescription: "T·∫°o c·∫•u tr√∫c k·ªãch b·∫£n video.", 
    longDescription: "Ki·∫øn t·∫°o nh·ªØng c√¢u chuy·ªán l√¥i cu·ªën, c√≥ c·∫•u tr√∫c ch·∫∑t ch·∫Ω, v√† t·ªëi ∆∞u h√≥a cho thu·∫≠t to√°n YouTube. Ch·ªâ c·∫ßn nh·∫≠p √Ω t∆∞·ªüng, AI Gnosis Core s·∫Ω ph√°c th·∫£o n√™n m·ªôt k·ªãch b·∫£n bom t·∫•n, s·∫µn s√†ng ƒë·ªÉ s·∫£n xu·∫•t.",
    icon: PyramidIcon, 
    bgColor: "#3C334D" 
  },
  { 
    name: "SEO YOUTUBE", 
    shortDescription: "T·ªëi ∆∞u h√≥a ti√™u ƒë·ªÅ, m√¥ t·∫£ v√† tag.",
    longDescription: "Gi·∫£i m√£ Ma Tr·∫≠n YouTube. AI s·∫Ω ph√¢n t√≠ch h√†ng tri·ªáu ƒëi·ªÉm d·ªØ li·ªáu ƒë·ªÉ cung c·∫•p cho b·∫°n b·ªô ti√™u ƒë·ªÅ, m√¥ t·∫£, v√† th·∫ª kh√≥a c√≥ t·ªâ l·ªá chuy·ªÉn ƒë·ªïi cao nh·∫•t, ƒë·∫©y video c·ªßa b·∫°n l√™n ƒë·ªânh t√¨m ki·∫øm.",
    icon: PhiIcon, 
    bgColor: "#003366" 
  },
  { 
    name: "PH√ÇN T√çCH ƒê·ªêI TH·ª¶", 
    shortDescription: "L·ªó h·ªïng v√† chi·∫øn l∆∞·ª£c ƒë·ªëi th·ªß.",
    longDescription: "Chi·∫øu r·ªçi m·ªçi ƒëi·ªÉm y·∫øu v√† chi·∫øn l∆∞·ª£c c·ªßa ƒë·ªëi th·ªß. C√¥ng c·ª• n√†y v·∫°ch tr·∫ßn nh·ªØng g√¨ ƒëang hi·ªáu qu·∫£, nh·ªØng l·ªó h·ªïng h·ªç b·ªè l·∫°i, v√† c∆° h·ªôi v√†ng ƒë·ªÉ b·∫°n chi·∫øm lƒ©nh th·ªã tr∆∞·ªùng.",
    icon: BinocularsIcon, 
    bgColor: "#660000" 
  },
  { 
    name: "T√åM K√äNH ·∫®N", 
    shortDescription: "Kh√°m ph√° xu h∆∞·ªõng b√≠ m·∫≠t.",
    longDescription: "Du h√†nh v√†o nh·ªØng v√πng ƒë·∫•t ch∆∞a ƒë∆∞·ª£c kh√°m ph√° c·ªßa YouTube. AI s·∫Ω l√πng s·ª•c v√† ph√°t hi·ªán c√°c xu h∆∞·ªõng ng·∫ßm, c√°c k√™nh 'kim c∆∞∆°ng trong ƒë√°' tr∆∞·ªõc khi ch√∫ng tr·ªü n√™n viral.",
    icon: PortalIcon, 
    bgColor: "#663300" 
  },
  { 
    name: "VI·∫æT L·∫†I K·ªäCH B·∫¢N", 
    shortDescription: "Hi·ªáu ch·ªânh v√† t√°i c·∫•u tr√∫c n·ªôi dung.",
    longDescription: "Thu·∫≠t to√°n Alkhemy s·∫Ω bi·∫øn nh·ªØng k·ªãch b·∫£n c≈© ho·∫∑c √Ω t∆∞·ªüng th√¥ th√†nh v√†ng. Tinh ch·ªânh c√¢u t·ª´, c·∫£i thi·ªán d√≤ng ch·∫£y, v√† t√°i c·∫•u tr√∫c n·ªôi dung ƒë·ªÉ ƒë·∫°t hi·ªáu su·∫•t lan truy·ªÅn t·ªëi ƒëa.",
    icon: HourglassIcon, 
    bgColor: "#336633" 
  },
  { 
    name: "T√åM MICRO NICHES", 
    shortDescription: "Khai th√°c ph√¢n kh√∫c v√†ng.",
    longDescription: "S·ª≠ d·ª•ng la b√†n AI ƒë·ªÉ ƒë·ªãnh v·ªã nh·ªØng th·ªã tr∆∞·ªùng ng√°ch vi m√¥ ƒë·∫ßy ti·ªÅm nƒÉng v√† √≠t c·∫°nh tranh. T√¨m ra c·ªông ƒë·ªìng ƒëam m√™ c·ªßa ri√™ng b·∫°n v√† tr·ªü th√†nh ti·∫øng n√≥i ƒë·ªôc t√¥n.",
    icon: CompassIcon, 
    bgColor: "#666600" 
  },
  { 
    name: "T·∫†O ·∫¢NH", 
    shortDescription: "Chuy·ªÉn ƒë·ªïi √Ω t∆∞·ªüng th√†nh h√¨nh ·∫£nh.",
    longDescription: "Chuy·ªÉn h√≥a ng√¥n t·ª´ th√†nh ngh·ªá thu·∫≠t th·ªã gi√°c. T·∫°o ra nh·ªØng h√¨nh thumbnail, ·∫£nh b√¨a, ho·∫∑c concept art ƒë·ªôc ƒë√°o v√† b·∫Øt m·∫Øt ch·ªâ t·ª´ m·ªôt v√†i m√¥ t·∫£ ƒë∆°n gi·∫£n. Tr√≠ t∆∞·ªüng t∆∞·ª£ng c·ªßa b·∫°n l√† gi·ªõi h·∫°n duy nh·∫•t.",
    icon: CubeIcon, 
    bgColor: "#4C4C4C" 
  },
  { 
    name: "NARRATIVE STUDIO", 
    shortDescription: "Bi·∫øn Text th√†nh S√°ch ·∫¢nh & S√°ch t√¥ m√†u.",
    longDescription: "Bi·∫øn Text th√†nh s·∫£n ph·∫©m K·ªÉ chuy·ªán b·∫±ng H√¨nh ·∫£nh c√≥ c·∫•u tr√∫c ho·∫∑c S√°ch T√¥ M√†u (Print-on-Demand Ready). C√¥ng c·ª• s·∫£n xu·∫•t to√†n di·ªán t·ª´ k·ªãch b·∫£n ƒë·∫øn file PDF/ePUB ho√†n thi·ªán.",
    icon: BookIcon, 
    bgColor: "#66334C" 
  },
  { 
    name: "TEXT-TO-SPEECH", 
    shortDescription: "Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i chuy√™n nghi·ªáp.",
    longDescription: "Th·ªïi h·ªìn v√†o t·ª´ng con ch·ªØ. Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i AI chuy√™n nghi·ªáp, t·ª± nhi√™n v√† ƒë·∫ßy c·∫£m x√∫c v·ªõi h√†ng lo·∫°t t√πy ch·ªçn gi·ªçng ƒë·ªçc, s·∫µn s√†ng cho m·ªçi video.",
    icon: MicrophoneIcon, 
    bgColor: "#006666" 
  },
  { 
    name: "T·∫†O VIDEO (Veo 3)", 
    shortDescription: "D·ª±ng video t·ª± ƒë·ªông t·ª´ n·ªôi dung ƒë·∫ßu v√†o.",
    longDescription: "ƒê·ªânh cao c·ªßa s√°ng t·∫°o. Bi·∫øn k·ªãch b·∫£n, h√¨nh ·∫£nh, ho·∫∑c ch·ªâ l√† m·ªôt √Ω nghƒ© tho√°ng qua th√†nh nh·ªØng th∆∞·ªõc phim ch·∫•t l∆∞·ª£ng ƒëi·ªán ·∫£nh. S·ª©c m·∫°nh c·ªßa m·ªôt studio phim n·∫±m trong tay b·∫°n.",
    icon: GearIcon, 
    bgColor: "rgba(10,10,10,0.8)" 
  },
];

const ToolButton: React.FC<{ tool: Tool; onClick: () => void; isSelected: boolean, align: 'left' | 'right', isLocked: boolean }> = ({ tool, onClick, isSelected, align, isLocked }) => (
  <button 
    onClick={onClick}
    disabled={isLocked}
    className={`group w-full p-4 border border-gray-800/50 bg-black/30 backdrop-blur-sm flex items-center gap-4 transition-all duration-300 ${align === 'left' ? 'hover:-translate-x-1' : 'hover:translate-x-1'} ${isSelected ? 'border-[#008080] emerald-glow' : 'hover:bg-gray-900/40'} ${isLocked ? 'cursor-not-allowed opacity-50' : 'hover:border-[#008080]/80'}`}
  >
    <div className={`h-10 w-10 flex-shrink-0 flex items-center justify-center text-[#008080] transition-colors duration-300 ${isLocked ? 'text-gray-600' : isSelected ? 'text-[#CDAD5A]' : 'group-hover:text-[#CDAD5A]'}`}>
      {isLocked ? 'üîí' : <tool.icon />}
    </div>
    <div className={`text-left ${align === 'right' && 'text-right'}`}>
      <h3 className={`font-semibold ${isLocked ? 'text-gray-500' : isSelected ? 'text-[#CDAD5A]' : 'text-white'}`}>{tool.name}</h3>
      <p className="text-xs text-gray-400">{isLocked ? 'Y√äU C·∫¶U N√ÇNG C·∫§P' : tool.shortDescription}</p>
    </div>
  </button>
);


const ToolsGrid: React.FC = () => {
  const [selectedTool, setSelectedTool] = useState<Tool | null>(null);
  const { plan } = useAuth(); // L·∫•y g√≥i d·ªãch v·ª• hi·ªán t·∫°i

  // --- LOGIC KI·ªÇM SO√ÅT QUY·ªÄN TRUY C·∫¨P (D·ª±a tr√™n c·∫•u tr√∫c 2/3/8/10 c√¥ng c·ª• ƒë√£ ch·ªët) ---
  const checkAccess = (toolName: string) => {
    if (plan === 'TOANTRI') return true; // Full access (10/10)

    const baseTools = ["VI·∫æT K·ªäCH B·∫¢N", "SEO YOUTUBE"];
    const archiveTools = ["PH√ÇN T√çCH ƒê·ªêI TH·ª¶"]; // 3/10
    const magistrateTools = ["T√åM K√äNH ·∫®N", "VI·∫æT L·∫†I K·ªäCH B·∫¢N", "T·∫†O ·∫¢NH", "TEXT-TO-SPEECH", "T√åM MICRO NICHES"]; // 8/10

    if (baseTools.includes(toolName)) {
        return true; // EXPLORER (2/10)
    }
    
    if (plan === 'ARCHIVE') {
        return toolName === 'PH√ÇN T√çCH ƒê·ªêI TH·ª¶';
    }

    if (plan === 'MAGISTRATE') {
        return magistrateTools.includes(toolName);
    }
    
    // C√°c c√¥ng c·ª• ƒë·ªôc quy·ªÅn c·ªßa TO√ÄN TRI
    if (toolName === 'NARRATIVE STUDIO' || toolName === 'T·∫†O VIDEO (Veo 3)') {
        return false; 
    }

    // M·∫∑c ƒë·ªãnh, n·∫øu kh√¥ng ph·∫£i To√†n Tri v√† l√† c√¥ng c·ª• cao c·∫•p, tr·∫£ v·ªÅ false
    return false;
  };
  // --- H·∫æT LOGIC KI·ªÇM SO√ÅT QUY·ªÄN TRUY C·∫¨P ---


  const handleToolSelect = (tool: Tool) => {
    if (!plan || !checkAccess(tool.name)) {
        const requiredPlan = tool.name === 'PH√ÇN T√çCH ƒê·ªêI TH·ª¶' ? 'ARCHIVE' : 
                             tool.name === 'NARRATIVE STUDIO' || tool.name === 'T·∫†O VIDEO (Veo 3)' ? 'TO√ÄN TRI' : 'MAGISTRATE';
        alert(`C√¥ng c·ª• "${tool.name}" y√™u c·∫ßu n√¢ng c·∫•p l√™n g√≥i ${requiredPlan} ƒë·ªÉ m·ªü kh√≥a!`);
        return;
    }
    
    if (selectedTool?.name === tool.name) {
      setSelectedTool(null);
    } else {
      setSelectedTool(tool);
    }
  };

  const toolsLeft = tools.slice(0, 5);
  const toolsRight = tools.slice(5, 10);
  const isToolSelected = selectedTool !== null;

  return (
    <section id="tools" className="py-20">
      <div className="container mx-auto px-6">
        <h2 className="text-4xl text-center font-playfair text-[#CDAD5A] mb-4">B·∫£ng ƒêi·ªÅu Khi·ªÉn T·ªëi Th∆∞·ª£ng</h2>
        <p className="text-xl text-center text-gray-400 mb-12">10 C√¥ng C·ª• Quy·ªÅn NƒÉng</p>
        
        <div className={`grid gap-8 transition-all duration-500 ${isToolSelected ? 'grid-cols-1' : 'grid-cols-1 lg:grid-cols-4'}`}>
          {/* Left Column */}
          <div className={`flex-col gap-4 ${isToolSelected ? 'hidden' : 'flex'}`}>
            {toolsLeft.map(tool => (
              <ToolButton 
                key={tool.name} 
                tool={tool}
                align="left"
                isLocked={!checkAccess(tool.name)}
                isSelected={selectedTool?.name === tool.name}
                onClick={() => handleToolSelect(tool)} 
              />
            ))}
          </div>

          {/* Center Console */}
          <div className={`p-1 border border-[#CDAD5A]/30 bg-black/50 relative overflow-hidden console-bg min-h-[40rem] transition-all duration-500 ${isToolSelected ? 'lg:col-span-1' : 'lg:col-span-2'}`}>
            {!selectedTool ? (
              <div className="flex flex-col items-center justify-center h-full text-center p-8">
                <div className="w-32 h-32 border-2 border-[#008080] artifact flex items-center justify-center">
                    <div className="w-16 h-16 border border-[#CDAD5A] artifact" style={{animationDelay: '-4s'}}></div>
                </div>
                <p className="mt-8 text-lg font-semibold text-[#CDAD5A] tracking-widest">CH·ªåN M·ªòT B√ç PH√ÅP ƒê·ªÇ KHAI ·∫§N</p>
              </div>
            ) : (
              <>
                {selectedTool.name === 'VI·∫æT K·ªäCH B·∫¢N' ? (
                  <ScriptwriterTool 
                    tools={tools}
                    onToolSelect={handleToolSelect}
                    onBack={() => setSelectedTool(null)}
                  />
                ) : selectedTool.name === 'SEO YOUTUBE' ? (
                  <SeoTool 
                    onBack={() => setSelectedTool(null)}
                  />
                ) : selectedTool.name === 'PH√ÇN T√çCH ƒê·ªêI TH·ª¶' ? (
                  <RivalScannerTool
                    tools={tools}
                    onToolSelect={handleToolSelect}
                    onBack={() => setSelectedTool(null)}
                  />
                ) : selectedTool.name === 'T√åM K√äNH ·∫®N' ? (
                  <HiddenChannelFinderTool
                    tools={tools}
                    onToolSelect={handleToolSelect}
                    onBack={() => setSelectedTool(null)}
                  />
                ) : selectedTool.name === 'VI·∫æT L·∫†I K·ªäCH B·∫¢N' ? (
                  <ScriptRefinerTool
                    onBack={() => setSelectedTool(null)}
                  />
                ) : selectedTool.name === 'T√åM MICRO NICHES' ? (
                  <MicroNicheMinerTool
                    onBack={() => setSelectedTool(null)}
                    tools={tools}
                    onToolSelect={handleToolSelect}
                  />
                ) : selectedTool.name === 'T·∫†O ·∫¢NH' ? (
                  <ImageForgeTool
                    onBack={() => setSelectedTool(null)}
                  />
                ) : selectedTool.name === 'NARRATIVE STUDIO' ? (
                  <StoryStudioTool
                    onBack={() => setSelectedTool(null)}
                  />
                ) : selectedTool.name === 'TEXT-TO-SPEECH' ? (
                  <TextToSpeechTool
                    onBack={() => setSelectedTool(null)}
                  />
                ) : selectedTool.name === 'T·∫†O VIDEO (Veo 3)' ? (
                  <VeocityTool
                    onBack={() => setSelectedTool(null)}
                  />
                ) : (
                  <div className="fade-in-content flex flex-col h-full p-8">
                    <div className="flex justify-between items-center mb-4">
                      <div className="flex items-center gap-4">
                          <div className="h-16 w-16 text-[#CDAD5A]">
                            <selectedTool.icon />
                          </div>
                          <h3 className="text-3xl font-playfair text-[#CDAD5A]">{selectedTool.name}</h3>
                      </div>
                      <button onClick={() => setSelectedTool(null)} className="text-gray-400 hover:text-white">&times; Tr·ªü V·ªÅ</button>
                    </div>
                    <p className="text-gray-300 flex-grow">{selectedTool.longDescription}</p>
                    <div className="mt-auto">
                        <textarea 
                            placeholder="Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c n√¢ng c·∫•p..." 
                            className="w-full h-20 p-3 bg-black/50 border border-gray-700/50 rounded-sm focus:outline-none focus:border-[#CDAD5A] text-gray-200 transition-colors"
                            disabled
                        />
                        <button className="w-full mt-4 bg-gray-600 text-white font-bold py-3 px-5 border-2 border-gray-600 rounded-sm cursor-not-allowed">
                            KHAI H·ªéA
                        </button>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>

          {/* Right Column */}
          <div className={`flex-col gap-4 ${isToolSelected ? 'hidden' : 'flex'}`}>
            {toolsRight.map(tool => (
              <ToolButton 
                key={tool.name}
                tool={tool}
                align="right"
                isLocked={!checkAccess(tool.name)}
                isSelected={selectedTool?.name === tool.name}
                onClick={() => handleToolSelect(tool)} 
              />
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default ToolsGrid;